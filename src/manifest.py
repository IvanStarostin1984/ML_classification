from __future__ import annotations

from pathlib import Path
import argparse
import hashlib
import json
import platform
import sys
import time
from typing import Sequence

import numpy as np
import pandas as pd
from sklearn.model_selection import GridSearchCV, ParameterGrid

__all__ = [
    "write_manifest",
    "sha256",
    "shasum",
    "save_folds",
    "run_grid",
    "main",
]


def sha256(path: str | Path) -> str:
    """Return SHA-256 hex digest of ``path``."""
    return hashlib.sha256(Path(path).read_bytes()).hexdigest()


def shasum(path: str | Path) -> str:
    """Return first 12 chars of :func:`sha256`."""
    return sha256(path)[:12]


def save_folds(tag: str, cv, X, y, out_dir: Path = Path("artefacts")) -> Path:
    """Save fold indices generated by ``cv``."""
    out_dir.mkdir(parents=True, exist_ok=True)
    path = out_dir / f"fold_indices_{tag}.npz"
    folds = {
        f"fold_{i}": idx.astype(np.int32) for i, (_, idx) in enumerate(cv.split(X, y))
    }
    np.savez_compressed(path, **folds)
    return path


def run_grid(
    pipe, grid, X, y, cv, tag: str, out_dir: Path = Path("artefacts")
) -> GridSearchCV:
    """Run ``GridSearchCV`` and persist results."""
    t0 = time.perf_counter()
    gs = GridSearchCV(pipe, grid, cv=cv, scoring="roc_auc", n_jobs=-1)
    gs.fit(X, y)
    runtime = time.perf_counter() - t0
    per_fit = runtime / (len(list(ParameterGrid(grid))) * cv.get_n_splits())
    out_dir.mkdir(parents=True, exist_ok=True)
    np.save(out_dir / f"per_fit_time_{tag}.npy", np.array(per_fit))
    pd.DataFrame(gs.cv_results_).to_csv(out_dir / f"cv_results_{tag}.csv", index=False)
    save_folds(tag, cv, X, y, out_dir)
    return gs


def write_manifest(
    files: Sequence[str], out: Path = Path("artefacts/SHA256_manifest.txt")
) -> Path:
    """Write SHA-256 checksums and environment info to ``out``."""
    out.parent.mkdir(parents=True, exist_ok=True)
    lines = []
    for fp in files:
        lines.append(f"{sha256(fp)}  {fp}")
    pyver = (
        f"{sys.version_info.major}.{sys.version_info.minor}."
        f"{sys.version_info.micro}"
    )
    env = {"python": pyver, "platform": platform.platform()}
    lines.append(json.dumps(env, sort_keys=True))
    out.write_text("\n".join(lines))
    return out


def main(args: list[str] | None = None) -> None:
    """CLI entry point writing file checksums to a manifest."""
    parser = argparse.ArgumentParser(description="Create checksum manifest")
    parser.add_argument("files", nargs="+", help="files to checksum")
    parser.add_argument(
        "--out",
        type=Path,
        default=Path("artefacts/SHA256_manifest.txt"),
        help="output manifest path",
    )
    ns = parser.parse_args(args)
    path = write_manifest(ns.files, ns.out)
    print(f"Manifest written to {path}")


if __name__ == "__main__":
    main()
